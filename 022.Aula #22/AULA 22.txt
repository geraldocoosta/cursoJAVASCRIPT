Comeуa a aula 22
Falando sobre mжtodos de funушes
Jр vimos as propriedades / mжtodos

~> name ~> retorna o nome da function, ou o nome da vрriavel que recebe a function (no meu js)

~> length ~> numero de parametros que a function recebe

~> toString() ~> retorna uma copia da function, da palavra chave function atж seu } (chaves) final!  :)

~> call() ~> uma outra forma de chamar uma function, sem ser pelo seu nome sendo imediatamente seguido pelo ().
Como esse eu nсo sabia, devo discorrer mais sobre para a fixaусo do mжtodo:

Imagine o seguinte cenario


  'use strict';
  function fazAlgoPo(paramA){
    console.log(this.algo + " ~~> " + paramA);  
  }


o this dessa funусo serр undefined, a nсo ser que passemos o new na frente, porжm a funусo dessa function nсo ж ser um contrutor, ж ser realmente uma function.
Entсo, essa funусo ж inutil? nсo!!

podemos chamar essa funусo pelo mжtodo call(). Com isso, passamos um objeto para esta referenciar co m o this. podemos passar tambжm seus atributos do segundo argumento em diante. Se eu implementar uma funусo que nсo precise de um objeto, mas precisar por algum motivo utilizar o call, posso passar um null em vez de um objeto como primeiro parРmetro.

Mas voltando ao exemplo anterior, para chamar aquela funусo, podemos usar as seguintes sintaxes:

	fazAlgoPo.call({algo: "TREINODEPERNAHJ" }, 'Yeah');

ou

	var obj = { algo: "Qualquer coisa"};
	fazAlgoPo.call(obj,'YEAH');

pode-se passar a prзpria funусo tambжm, que ж bem legal, jр que function ж um obj

Manjastes? 

~> apply() ~> igual o call, mas em vez de passarmos os parРmetros da forma padrсo, juntamos todas em um array e passamos esse array como segundo argumento
Quando o apply ж usado, o array ж quebrado e cada item do array vira um argumeto (Outras palavras pra escrever outra coisa)

~> ~>